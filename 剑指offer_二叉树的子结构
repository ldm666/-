//
class Solution {
public:
    
    bool HasSubtree(TreeNode* pRoot1, TreeNode* pRoot2)
    {
         bool flag=false;
         //当Tree1和Tree2都不为零的时候，才进行比较。否则直接返回false
         if(pRoot1 && pRoot2){
             //如果找到了对应Tree2的根节点的点
             if(pRoot1->val==pRoot2->val)
                 //以这个根节点为为起点判断是否包含Tree2
                 flag=doesAcontainB(pRoot1,pRoot2);
             //如果找不到，那么就再去root的左儿子当作起点，去判断时候包含Tree2
             if(flag==false){
                 flag=HasSubtree(pRoot1->left,pRoot2);
             }
             //如果还找不到，那么就再去root的右儿子当作起点，去判断时候包含Tree2
             if(flag==false){
                 flag=HasSubtree(pRoot1->right,pRoot2);
             }
         }
         return flag;
             
    }
private:
    //注意30和33行的两种情况不能调换顺序！！
    
    bool doesAcontainB(TreeNode* pRoot1, TreeNode* pRoot2){
         //如果Tree2已经遍历完了都能对应的上，返回true           
         if(pRoot2==NULL)
             return true;
         //如果Tree2还没有遍历完，Tree1却遍历完了。返回false
         if(pRoot1==NULL)
             return false;
         //如果其中有一个点没有对应上，返回false
         if(pRoot1->val != pRoot2->val){
             return false;
         }
         //如果根节点对应的上，那么就分别去子节点里面匹配
         return doesAcontainB(pRoot1->left,pRoot2->left) && doesAcontainB(pRoot1->right,pRoot2->right);
    }
};
