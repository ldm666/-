//DFS解法
http://www.cnblogs.com/grandyang/p/4484571.html
class Solution {
public:
    bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector<int>> graph(numCourses,vector<int>(0));//此时每行为空
        vector<int> visited(numCourses,0);
        for(auto& a : prerequisites){
            graph[a.first].push_back(a.second); 
        }
        for(int i=0;i<numCourses;++i){
            if(!canFinishDFS(graph,visited,i)) return false;
        }
        return true;
    }
private:
//想清楚递归终止条件和出错条件
    bool canFinishDFS(vector<vector<int> > &graph, vector<int> &visited, int i){
        if(visited[i]==-1) return false;
        if(visited[i]==1) return true;
        visited[i]=-1;  //表示冲突了
        for(auto a : graph[i]){
            if(!canFinishDFS(graph,visited,a)) return false;
        }
        visited[i]=1;  //设置为访问过了
        return true;
    }
};

//BFS解法，没看，找时间看能不能写出来
class Solution {
public:
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<vector<int> > graph(numCourses, vector<int>(0));
        vector<int> in(numCourses, 0);
        for (auto a : prerequisites) {
            graph[a[1]].push_back(a[0]);
            ++in[a[0]];
        }
        queue<int> q;
        for (int i = 0; i < numCourses; ++i) {
            if (in[i] == 0) q.push(i);
        }
        while (!q.empty()) {
            int t = q.front();
            q.pop();
            for (auto a : graph[t]) {
                --in[a];
                if (in[a] == 0) q.push(a);
            }
        }
        for (int i = 0; i < numCourses; ++i) {
            if (in[i] != 0) return false;
        }
        return true;
    }
};
