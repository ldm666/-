// memo[i] 表示考虑抢劫 nums[0...i] 所能获得的最大收益
class Solution {

public:
    int rob(vector<int>& nums) {

        int n = nums.size();
        if( n == 0 )
            return 0;

        // memo[i] 表示考虑抢劫 nums[0...i] 所能获得的最大收益
        vector<int> memo(n, 0);
        memo[0] = nums[0];
        for(int i = 1 ; i < n ; i ++)
            for (int j = i; j >= 0; j--)    //注意j从后面开始递减
                memo[i] = max(memo[i],
                              nums[j] + (j - 2 >= 0 ? memo[j - 2] : 0));

        return memo[n-1];
    }
};

//上面的一种错解,需思考
class Solution {
public:
    int rob(vector<int>& nums) {
        int n=nums.size();
        if(n==0)
            return 0;
        vector<int> dp(n,0);
        dp[0]=nums[0];
        for(int i=1;i<n;i++){
            for(int j=0;j<=i;j++){                               //这里看似和上面差不多，但这里j从0开始遍历，为什么结果会错呢？？
                  dp[i]=max(dp[i],nums[j]+(j+2<=i ? dp[j+2]:0));
            }
        }
        return dp[n-1];
    }
};

//改变状态为：memo[i] 表示考虑抢劫 nums[i...n) 所能获得的最大收益
public:
    int rob(vector<int>& nums) {

        int n = nums.size();

        if(n == 0)
            return 0;

        // memo[i] 表示考虑抢劫 nums[i...n) 所能获得的最大收益
        vector<int> memo(n, 0);
        memo[n - 1] = nums[n - 1];
        for(int i = n - 2 ; i >= 0 ; i --)
            for (int j = i; j < n; j++)
                memo[i] = max(memo[i],
                              nums[j] + (j + 2 < n ? memo[j + 2] : 0));

        return memo[0];
    }
