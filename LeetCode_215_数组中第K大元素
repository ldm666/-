//考察快排思想
//用到了快速排序Quick Sort的思想，这里排序的方向是从大往小排。
//核心思想是每次都要先找一个中枢点Pivot，然后遍历其他所有的数字，
//像这道题从大往小排的话，就把小于中枢点的数字放到左半边，把大于中枢点的放在右半边，这样中枢点是整个数组中第几大的数字就确定了，
//虽然左右两部分不一定是完全有序的，但是并不影响本题要求的结果，所以我们求出中枢点的位置，如果正好是k-1，那么直接返回该位置上的数字；
//如果大于k-1，说明要求的数字在左半部分，更新右边界，再求新的中枢点位置；反之则更新右半部分，求中枢点的位置

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int l=0,r=nums.size()-1;
        while(true){
            int pos=partition(nums, l, r);
            if (pos==k-1) return nums[pos];  //这种解法要求的快排是:左边都比nums[pos]要大，右边都比nums[pos]小
            else if (pos>k-1) r=pos-1;
            else l=pos+1;
        }
    }
private:
    int partition(vector<int>& nums, int left, int right){
        int pick=nums[left];
        int l=left+1,r=right;
        while(l<=r){
            if(nums[l]< pick && nums[r]> pick)
                swap(nums[l++],nums[r--]);
            if(nums[l]>= pick)
                l++;
            if(nums[r]<= pick)
                r--;
        }
        swap(nums[left],nums[r]);
        return r;                 //不能return l，因为跳出while的时候l和r不一定相等，有可能差1；画画图想临界情况也就知道应该返回r的
    }
};

//利用优先队列(大根堆)顶部自动保存最大值的特性
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> q(nums.begin(), nums.end());
        for (int i = 0; i < k - 1; ++i) {           //弹出k-1个元素后，堆的顶部就是第K大的元素
            q.pop();
        }
        return q.top();
    }
};

//排序
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        sort(nums.begin(), nums.end());  //或者大到小排序：sort(nums.begin(), nums.end(),[](int a,int b){return a>b;}); return nums[k-1];
        return nums[nums.size() - k];
    }
};
