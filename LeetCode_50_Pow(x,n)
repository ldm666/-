http://www.cnblogs.com/grandyang/p/4383775.html
解一：递归，辅助函数
class Solution {
public:
    double myPow(double x, int n) {
        if(n<0) return 1/power(x,-n);
        return power(x,n);
    }
private:
    double power(double x, int n){
        if(n==0) return 1;
        double half=power(x,n/2);
        if(n%2==0) return half*half;
        else return half*half*x;
    }
};

解二：递归，不用辅助函数
class Solution {
public:
    double myPow(double x, int n) {
        if (n == 0) return 1;
        double half = myPow(x, n / 2);
        if (n % 2 == 0) return half * half;
        else if (n > 0) return half * half * x;
        else return half * half / x;
    }
};

解三：迭代
怎么理解？？？
class Solution {
public:
    double myPow(double x, int n) {
        double res = 1.0;
        for (int i = n; i != 0; i /= 2) {
            if (i % 2 != 0) res *= x;
            x *= x;
        }
        return n < 0 ? 1 / res : res;
    }
}
