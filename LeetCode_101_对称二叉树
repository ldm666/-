//DFS
//什么是基础情况要考虑清楚
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL) return true;
        return isSymmetric(root->left,root->right); //判断左右子树是否对称
    }
private:
    bool isSymmetric(TreeNode* left,TreeNode* right){
        if(left==NULL && right==NULL) return true;      //如果这两个结点都为空，说明上一步到达叶子结点了且没出现问题，true
        if(left && !right || right && !left || left->val!=right->val ) return false;   //如果两个结点其中一个为空，或者这两个结点值不等，不对称，false
        return isSymmetric(left->left,right->right) && isSymmetric(left->right,right->left); //主逻辑，上面对于空的情况考虑详尽了
    }
};

    1
   / \
  2   2
 / \ / \
3  4 4  3    对称

    1
   / \
  2   2
   \   \
   3    3   不对称

//BFS
//维护两个队列，一个保存左子树结点，一个保存右子树结点
//核心思路其实和dfs一样的，只是写法不一样

class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL) return true;
        queue<TreeNode*> q1,q2;
        q1.push(root->left);
        q2.push(root->right);
        while(!q1.empty() && !q2.empty()){
            TreeNode* left=q1.front();
            q1.pop();
            TreeNode* right=q2.front();
            q2.pop();
            if(left && !right || !left && right) return false;
            if(!left && !right) continue;
            if(left->val==right->val){   //注意入队顺序
                q1.push(left->left);
                q1.push(left->right);
                q2.push(right->right);
                q2.push(right->left);
            }else{
                return false;
            }
        }
        return true;
    }
};
