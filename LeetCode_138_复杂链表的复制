/**
 * Definition for singly-linked list with a random pointer.
 * struct RandomListNode {
 *     int label;
 *     RandomListNode *next, *random;
 *     RandomListNode(int x) : label(x), next(NULL), random(NULL) {}
 * };
 */
//剑指offer P187
//https://www.nowcoder.com/questionTerminal/f836b2c43afc4b35ad6adc41ec941dba

1. 在原链表的每个节点后面拷贝出一个新的节点

2. 依次给新的节点的随机指针赋值，而且这个赋值非常容易 cur->next->random = cur->random->next

3. 断开链表可得到深度拷贝后的新链表

class Solution {
public:
    RandomListNode *copyRandomList(RandomListNode *head) {
        if(!head) return nullptr;
        RandomListNode* cur=head;
        //新建的N'结点放在原结点N的后面
        while(cur){
            RandomListNode* node=new RandomListNode(cur->label);
            node->next=cur->next;
            cur->next=node;
            cur=node->next;
        }
        cur=head;
        //依次给新的节点的随机指针赋值
        while(cur){
            RandomListNode* node=cur->next;
            if(cur->random){
                node->random=cur->random->next;
            }
            cur=node->next;
        }
        RandomListNode* pcloneHead=head->next;
        cur=head;
        //断开链表，返回拷贝链表的头
        while(cur){
            RandomListNode* tmp=cur->next;
            cur->next=tmp->next;
            if(tmp->next) tmp->next=tmp->next->next;
            cur=cur->next;
        }
        return pcloneHead;
    }
};
