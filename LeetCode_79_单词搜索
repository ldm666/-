//回溯法，比下面的解法好，没有用额外的visited数组
//注意这类题的代码结构，有规律的
//这题要求同一个格子不能访问第二次，所以每访问一个格子都要作标记。可用visited数组也可以直接在原二维数组上作标记
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if(board.empty()) return false;
        int m=board.size(),n=board[0].size();
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(search(board,word,0,i,j)) return true;
            }
        }
        return false;
    }
private:
    bool search(vector<vector<char>>& board, string word, int idx, int i, int j){
        if(idx==word.size()) return true;
        int m=board.size(),n=board[0].size();
        if(i>=m || j>=n || i<0 || j<0 || board[i][j]!=word[idx]) return false;
        char c=board[i][j];
        board[i][j]='#';    //作标记
        bool res=search(board,word,idx+1,i+1,j) || search(board,word,idx+1,i-1,j) || search(board,word,idx+1,i,j-1) || search(board,word,idx+1,i,j+1);
        board[i][j]=c;      //回溯
        return res;
    }
};

//这里用到了visited数组
class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        if (board.empty() || board[0].empty()) return false;
        int m = board.size(), n = board[0].size();
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (search(board, word, 0, i, j, visited)) return true;
            }
        }
        return false;
    }
    bool search(vector<vector<char>>& board, string word, int idx, int i, int j, vector<vector<bool>>& visited) {
        if (idx == word.size()) return true;
        int m = board.size(), n = board[0].size();
        if (i < 0 || j < 0 || i >= m || j >= n || visited[i][j] || board[i][j] != word[idx]) return false;
        visited[i][j] = true;
        bool res = search(board, word, idx + 1, i - 1, j, visited) 
                 || search(board, word, idx + 1, i + 1, j, visited)
                 || search(board, word, idx + 1, i, j - 1, visited)
                 || search(board, word, idx + 1, i, j + 1, visited);
        visited[i][j] = false;
        return res;
    }
};
