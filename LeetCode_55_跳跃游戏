解一：贪心策略
https://www.cnblogs.com/grandyang/p/4606334.html
我们并不是很关心每一个位置上的剩余步数，我们只希望知道能否到达末尾，也就是说我们只对最远能到达的位置感兴趣，
所以我们维护一个变量reach，表示最远能到达的位置，初始化为0。遍历数组中每一个数字，
如果当前坐标大于reach或者reach已经抵达最后一个位置则跳出循环，否则就更新reach的值为其和i + nums[i]中的较大值，
其中i + nums[i]表示当前位置能到达的最大位置

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n=nums.size(),reach=0;
        for(int i=0;i<n;++i){
            if(i > reach || reach >= n-1) break;
            reach=max(reach,i+nums[i]);
        }
        return reach >= n-1;
    }
};

解二：动态规划
解析见：http://www.cnblogs.com/grandyang/p/4371526.html
class Solution {
public:
    bool canJump(vector<int>& nums) {
        vector<int> dp(nums.size(), 0);
        for (int i = 1; i < nums.size(); ++i) {
            dp[i] = max(dp[i - 1], nums[i - 1]) - 1;
            if (dp[i] < 0) return false;
        }
        return dp.back() >= 0;
    }
};
