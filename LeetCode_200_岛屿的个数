DFS经典题，要认真理解
class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        if(grid.empty() || grid[0].empty()) return 0;
        int m=grid.size(),n=grid[0].size();
        vector<vector<bool>> visited(m,vector<bool>(n,false));
        int res=0;
        for(int i=0;i<m;++i){
            for(int j=0;j<n;++j){
                if(grid[i][j]=='1' && visited[i][j]==false){
                    res++;                         //因为每遍历到一次新的1，都会把和这个1关联的岛屿都访问过一次，所以res的计算不会重复
                    dfs(grid,visited,i,j);
                } 
            }
        }
        return res;
    }
    void dfs(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j){
        //哪些情况需要返回，一定要考虑完备
        if(i<0 || i>=grid.size()) return;
        if(j<0 || j>=grid[0].size()) return;
        if(visited[i][j] || grid[i][j]!='1') return;
        visited[i][j]=true;
        dfs(grid,visited,i-1,j);
        dfs(grid,visited,i+1,j);
        dfs(grid,visited,i,j-1);
        dfs(grid,visited,i,j+1);
    }
};
