有重复数字，按照46的解法会导致有重复的组合出现
//解一
class Solution {
public:
    void recursion(vector<int> num, int i, int j, vector<vector<int> > &res) {
        if (i == j-1) {   //  j-1和j结果都一样
            res.push_back(num);
            return;
        }
        for (int k = i; k < j; k++) {
            if (i != k && num[i] == num[k]) continue;  //跳过重复的数字
            swap(num[i], num[k]);
            recursion(num, i+1, j, res);
            //如果传值的话，不用复位；每次递归的时候str作为形参参与下一次交换，不影响上层值，所以上层还是排好序的
        }
    }
    vector<vector<int> > permuteUnique(vector<int> &num) {
        sort(num.begin(), num.end());     //保证最后输出按字典序
        vector<vector<int> >res;
        recursion(num, 0, num.size(), res);
        return res;
    }
};

//解二：利用set去重，又因为set内部排序，所以最后的结果也是按字典序输出的
class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        set<vector<int>> s;
        permute(nums,0,s);
        vector<vector<int>> res(s.begin(),s.end());
        return res;
    }
private:
    void permute(vector<int>& nums, int index,set<vector<int>>& s){
        if(index==nums.size()){
            s.insert(nums);
            return;
        }
        for(int i=index;i<nums.size();i++){
            swap(nums[i],nums[index]);
            permute(nums,index+1,s);
            swap(nums[i],nums[index]);   
        }
    }
};

//另外牛客上另外的解法，链接：https://www.nowcoder.com/questionTerminal/fe6b651b66ae47d7acce78ffdd9a96c7
来源：牛客网
void PermutationHelp(vector<string> &ans, int k, string str) //遍历第k位的所有可能
{
    if(k == str.size() - 1)
        ans.push_back(str);
    unordered_set<char> us;  //记录出现过的字符
    sort(str.begin() + k, str.end());  //保证按字典序输出
    for(int i = k; i < str.size(); i++)
    {
        if(us.find(str[i]) == us.end()) //只和没交换过的换
        {  
            us.insert(str[i]);
            swap(str[i], str[k]);
            PermutationHelp(ans, k + 1, str);
        }
    }
}
 
vector<string> Permutation(string str) {
    vector<string> ans;
    PermutationHelp(ans, 0, str);
    return ans;
}
