//参考http://www.cnblogs.com/grandyang/p/4620012.html的N种解法

//利用中序遍历的递归解法(试试用非递归实现中序遍历)
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        return helper(root,k)->val;
    }
private:
    int count=0;
    TreeNode* helper(TreeNode* root, int k){
        if(root){
            TreeNode* left=helper(root->left,k);
            if(left)
                return left;
            count++;
            if(count==k)
                return root;
            TreeNode* right=helper(root->right,k);
            if(right)
                return right;
        }
        return nullptr;
    }
};

//解二：类似解一
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        return kthSmallestDFS(root, k);
    }
    int kthSmallestDFS(TreeNode* root, int &k) {
        if (!root) return -1;
        int val = kthSmallestDFS(root->left, k);
        if (k == 0) return val;
        if (--k == 0) return root->val;
        return kthSmallestDFS(root->right, k);
    }
};

//解三：再来看一种分治法的思路，由于BST的性质，我们可以快速定位出第k小的元素是在左子树还是右子树，我们首先计算出左子树的结点个数总和cnt
//如果k小于等于左子树结点总和cnt，说明第k小的元素在左子树中，直接对左子结点调用递归即可。
//如果k大于cnt+1，说明目标值在右子树中，对右子结点调用递归函数，注意此时的k应为k-cnt-1，应为已经减少了cnt+1个结点。
//如果k正好等于cnt+1，说明当前结点即为所求，返回当前结点值即可
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int cnt = count(root->left);
        if (k <= cnt) {
            return kthSmallest(root->left, k);
        } else if (k > cnt + 1) {
            return kthSmallest(root->right, k - cnt - 1);
        }
        return root->val;
    }
    int count(TreeNode* node) {
        if (!node) return 0;
        return 1 + count(node->left) + count(node->right);
    }
};

//解四：非递归版中序遍历
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        int cnt = 0;
        stack<TreeNode*> s;
        TreeNode *p = root;
        while (p || !s.empty()) {
            while (p) {
                s.push(p);
                p = p->left;
            }
            p = s.top(); s.pop();
            ++cnt;
            if (cnt == k) return p->val;
            p = p->right;
        }
        return 0;
    }
};
