//根据二叉树的前序遍历，中序遍历重构二叉树
//剑指offer原题

class Solution {
 
public:
    /* from Preorder and Inorder Traversal */
    TreeNode* reConstructBinaryTree(vector<int> preorder, vector<int> inorder) {
 
        return helper(preorder,0,preorder.size(),inorder,0,inorder.size());
     
    }
 
    TreeNode* helper(vector<int>& preorder,int i,int j,vector<int>& inorder,int ii,int jj)
    {
        //i为前序开始的位置，j为前序右边界(取不到)；ii为中序的起始位置，jj为中序的右边界(取不到)
        // tree        8 4 5 3 7 3
        // preorder    8 [4 3 3 7] [5]
        // inorder     [3 3 4 7] 8 [5]
 
        // 每次从 preorder 头部取一个值 mid，作为树的根节点
        // 检查 mid 在 inorder 中 的位置，则 mid 前面部分将作为 树的左子树，右部分作为树的右子树
 
        if(i >= j || ii >= jj)
            return NULL;
 
        int mid = preorder[i];
        auto f = find(inorder.begin() + ii,inorder.begin() + jj,mid);
 
        int dis = f - inorder.begin() - ii;    //左子树的节点个数
 
        TreeNode* root = new TreeNode(mid);
        root -> left = helper(preorder,i + 1,i + 1 + dis,inorder,ii,ii + dis);   //下标范围是细节
        root -> right = helper(preorder,i + 1 + dis,j,inorder,ii + dis + 1,jj);
        return root;
    }
};
添加笔记
