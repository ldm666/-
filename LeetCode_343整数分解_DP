//动态规划：先从递归思路入手，再根据递归版本改为dp

class Solution {
public:
    int integerBreak(int n) {
        if(n<=0)
            return 0;
        vector<int> dp(n+1,0);
        dp[0]=0;
        dp[1]=1;
        for(int i=2;i<=n;i++){
            for(int j=1;j<=i-1;j++){                    //这里很容易错写成j<=n-1
                dp[i]=max3(dp[i],j*(i-j),j*dp[i-j]);
            }
        }
        return dp[n];
    }
private:
    int max3(int a ,int b, int c){
        return max(a,max(b,c));
    }
};


//递归思路

class Solution {

private:
    int max3(int a, int b, int c){
        return max(a, max(b, c));
    }

    // 将n进行分割(至少分割两部分), 可以获得的最大乘积
    int breakInteger(int n){

        if(n == 1)
            return 1;

        int res = -1;
        for(int i = 1 ; i <= n - 1 ; i ++)
            res = max3(res, i * (n - i), i * breakInteger(n - i));
        return res;
    }

public:
    int integerBreak(int n) {
        assert(n >= 1);
        return breakInteger(n);
    }
};
