//广度优先遍历BFS
  int numSquares(int n) {
        
        queue< pair<int,int> >q;
        
        q.push( make_pair(n,0) ); // n是给定的正整数，0是初始步数，为0.
        
        vector<bool> visited(n+1,false); //层序遍历减枝，图可能会反复遍历相同的节点。这里之前遍历过的，后面就不用遍历计算了。
        visited[n] = true;
        
        
        while( !q.empty()){
            
            int num = q.front().first;
            int step = q.front().second;
            
            q.pop();
            
            for( int i = 1; num - i*i >= 0 ; i++){
                int a = num - i*i;  //减去平方数，获得下一个图节点位置，即是step + 1层。可能有多种情况，会到达多个节点。
                if(a < 0)
                    break;
                if (a == 0)
                    return step + 1;  //当到达0节点，说明已经走完了。由于是层序的，第一个到达0节点就直接返回步数了。
                if (!visited[a])
                q.push( make_pair(a ,step + 1));  //记录到达当前节点，已经走了的步数。
                visited[a] =true;
            }
        }
        
        return 0;
    }
    
    
//动态规划
class Solution {
public:
    int numSquares(int n) {
        if(n<=0)
            return 0;
        vector<int> dp(n+1,INT_MAX);   //因为下面是去min，所以初值设置最大int
        dp[0]=0;                       //把0看做没有平方数，取0
        for(int i=1;i<=n;i++){          
            for(int j=1;j*j<=i;j++){           //注意j*j<=i不是<=n !!!!
                dp[i]=min(dp[i],dp[i-j*j]+1);  //递推关系
            }
        }
        return dp[n];                  //返回最后一个
    }
};
