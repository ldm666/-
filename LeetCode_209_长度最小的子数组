http://www.cnblogs.com/grandyang/p/4501934.html
解一：双指针
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        if(nums.empty()) return 0;
        int left=0,right=0,sum=0,len=nums.size(),res=len+1;
        while(right < len){
            while(sum<s && right<len){
                sum+=nums[right++];
            }
            while(sum>=s){
                res=min(res,right-left);  之所以不是right-left+1,是因为在上一个循环中right最后已经自增了，指向了当前的下一个
                sum-=nums[left++];
            }
        }
        return res==len+1 ? 0 : res;
    }
};
//同上，可能比较容易写出来
class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int l = 0 , r = -1; // sliding window: nums[l...r]
        int sum = 0;
        int res = nums.size() + 1;
        while(l < nums.size()){
            if(r + 1 < nums.size() && sum < s)
                sum += nums[++r];
            else
                sum -= nums[l++];
            if(sum >= s)
                res = min(res, r - l + 1);
        }
        if(res == nums.size() + 1)
            return 0;
        return res;
    }
};


//还有O(nlogn)的二分法，不过没看懂。。。见官方solution或博客
int minSubArrayLen(int s, vector<int>& nums)
{
    int n = nums.size();
    if (n == 0)
        return 0;
    int ans = INT_MAX;
    vector<int> sums(n + 1, 0); //size = n+1 for easier calculations
    //sums[0]=0 : Meaning that it is the sum of first 0 elements
    //sums[1]=A[0] : Sum of first 1 elements
    //ans so on...
    
    for (int i = 1; i <= n; i++)
        sums[i] = sums[i - 1] + nums[i - 1];
    for (int i = 1; i <= n; i++) {
        int to_find = s + sums[i - 1];
        auto bound = lower_bound(sums.begin(), sums.end(), to_find);
        if (bound != sums.end()) {
            ans = min(ans, static_cast<int>(bound - (sums.begin() + i - 1)));
        }
    }
    return (ans != INT_MAX) ? ans : 0;
}
