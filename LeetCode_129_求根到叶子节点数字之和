//别人的解法
class Solution {
public:
    int sumNumbers(TreeNode *root) {
        if(!root)
            return 0;
        sum=0;
        DFS(root, 0);
        return sum;
    }
    
    void DFS(TreeNode *&node, int currentSum)
    {
        currentSum=currentSum*10+node->val;    //当数字是从后面逐渐加时这么做
        if(!node->left&&!node->right)          //到叶子结点时
            sum+=currentSum;
        if(node->left)
            DFS(node->left, currentSum);
        if(node->right)
            DFS(node->right, currentSum);
    }
private:
    int sum;
};

//我的不通过解法，不知道错哪了。。。
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        if(root==NULL) return 0;
        vector<string> paths;
        string path;
        dfs(root,paths,path);
        int sum=0;
        for(auto& k:paths){
            sum+=atoi(k.c_str()); 
        }
        return sum;
    }
private:
    void dfs(TreeNode* cur,vector<string>& paths,string& path){
        if(cur==NULL) return;
        path.push_back(cur->val);
        if(!cur->left && !cur->right){
            paths.push_back(path);
            return;
        }
        if(cur->left) dfs(cur->left,paths,path);
        if(cur->right) dfs(cur->right,paths,path);
        path.pop_back();
    }
};
//结果一直是0
