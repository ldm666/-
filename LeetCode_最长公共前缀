//我的解法：先求vector中最短的string的长度，然后从第一个字符开始比较vector的各个元素
class Solution {
public:
    string longestCommonPrefix(vector<string>& strs) {
        string str;
        if(strs.empty())
            return str;
        str="";
        vector<int> len;
        for(int i=0;i<strs.size();i++)           //下面这5,6行求最小string长度，感觉有更简短的写法。。。实在菜的抠脚
        {
            len.push_back(strs[i].size());
        }
        auto minloc=min_element(len.begin(),len.end());
        int minlen=*minloc;
        for(int j=0;j<minlen;j++)              //注意两个for循环的前后逻辑顺序
        {
            for(int i=0;i<strs.size()-1;i++)   //注意i的范围，因为涉及到i+1所以范围要-1
            {
                if(strs[i][j]!=strs[i+1][j])
                {
                    return str;
                }
            }
            str+=strs[0][j];
        } 
        return str;
    }
};

//别人写的一个很简洁的做法：取第一个string和其他的string逐个作比较，如果不符合就截短长度；而我的解法是同时比较相同位置的字母
 string longestCommonPrefix(vector<string>& strs) {
        if(strs.empty()) return "";
        string res = strs[0];
        for(int i=0; i<strs.size();i++)
            for(int j=0; j<res.size();j++)
                if(strs[i][j]!=res[j]) {res.resize(j); break;}
        return res;
    }
