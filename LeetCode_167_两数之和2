//双指针  O(n)
class Solution {
public:
    vector<int> twoSum(vector<int>& numbers, int target) {
        if(numbers.size()<2) return {};
        int slow=0,fast=numbers.size()-1;
        while(slow < fast){
            if(numbers[slow]+numbers[fast] > target){
                fast--;
            }else if(numbers[slow]+numbers[fast] < target){
                slow++;
            }else {
                return {slow+1,fast+1};
            }
        }
        return {};
    }
};


//二分法 lg(n-1) + lg(n-2) + ... + lg(1) ~ O(lg(n!)) ~ O(nlgn).
vector<int> twoSum(vector<int> &numbers, int target) {
    if(numbers.empty()) return {};
    for(int i=0; i<numbers.size()-1; i++) {
        int start=i+1, end=numbers.size()-1, gap=target-numbers[i];
        while(start <= end) {
            int m = start+(end-start)/2;
            if(numbers[m] == gap) return {i+1,m+1};
            else if(numbers[m] > gap) end=m-1;
            else start=m+1;
        }
    }
}
