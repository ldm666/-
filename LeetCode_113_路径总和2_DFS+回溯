//请务必理解此题，dfs+回溯
class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int sum) {
        vector<int> path;
        vector<vector<int>> paths;
        dfs(root,sum,path,paths);
        return paths;
    }
private:
    void dfs(TreeNode* cur,int sum,vector<int>& path,vector<vector<int>>& paths){
        if(cur==NULL) return;
        path.push_back(cur->val);
        if(cur->left==NULL && cur->right==NULL && sum==cur->val)
            paths.push_back(path);              //这里推入结果后不能马上return，因为还没回溯，无论是不是到达叶子结点，都必须走到18行的回溯
        dfs(cur->left,sum-cur->val,path,paths);
        dfs(cur->right,sum-cur->val,path,paths);//有了回溯，才能保证从左子树回归时当前path只有根节点一个元素，才能正确的访问右子树
        path.pop_back();//回溯；因为是传引用
    }
};

              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
 正确输出：[[5,4,11,2],[5,8,4,5]] 
 
 如果不回溯，输出[[5,4,11,7,2],[5,4,11,7,2,8,13,4,5]]
 
 追踪：从5-4-11-2依次加入path，当从底层回归到根结点5时，如果有了回溯，就保证path被一步一步清空，
      左子树回归根节点时才能保证path只有根节点一个元素，才能正确访问右子树。
