//解法一：相对直观一些

class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        if (!root) return 0;
        int sub = max(longestUnivaluePath(root->left), longestUnivaluePath(root->right));//分别求左右子树的最大同值路径长度(不含父结点)
        return max(sub, helper(root->left, root->val) + helper(root->right, root->val));//考虑父节点
    }
    int helper(TreeNode* node, int parent) {
        if (!node || node->val != parent) return 0;
        return 1 + max(helper(node->left, node->val), helper(node->right, node->val));
    }
};.

//解法二：
//待理解 http://www.cnblogs.com/grandyang/p/7636259.html
class Solution {
public:
    int longestUnivaluePath(TreeNode* root) {
        if (!root) return 0;
        int longestPath=0;
        go(root, longestPath);
        return longestPath;
    }
private:
    int go(TreeNode* root, int& m){
        int l=root->left ? go(root->left, m) : 0;
        int r=root->right ? go(root->right, m) : 0;
        l=(root->left && root->left->val==root->val) ? l+1 : 0;
        r=(root->right && root->right->val==root->val) ? r+1 : 0;
        m=max(m,l+r);
        return max(l,r);
    }
