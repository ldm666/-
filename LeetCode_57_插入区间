/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 
http://www.cnblogs.com/grandyang/p/4367569.html

class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        vector<Interval> res;
        int n=intervals.size(),cur=0;
        //先把没有重叠的加到结果中
        while(cur<n && intervals[cur].end < newInterval.start){
            res.push_back(intervals[cur++]);
        }
        //处理所有可能重叠的区间。注意可能会有多个重叠的区间
        while(cur<n && intervals[cur].start <= newInterval.end){
            newInterval.start=min(newInterval.start,intervals[cur].start);
            newInterval.end=max(newInterval.end,intervals[cur].end);
            cur++;
        }
        res.push_back(newInterval);
        //插入剩下不重叠的
        while(cur<n){
            res.push_back(intervals[cur++]);
        }
        return res;
    }
};
