//固定一个数，然后另外两个数之和肯定等于这个数取负，可利用双指针
//http://www.cnblogs.com/grandyang/p/4481576.html
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> res;
        sort(nums.begin(),nums.end());
        if(nums.empty() || nums.back()<0 || nums.front()>0) return res;
        for(int k=0;k<nums.size();++k){
            if(nums[k]>0) break;                     //剪枝，如果当前是正数，那么剩下的肯定也是正数了，和不可能为0，直接break
            if(k>0 && nums[k]==nums[k-1]) continue;  //跳过重复的元素
            int target=-nums[k];
            int i=k+1,j=nums.size()-1;
            while(i<j){
                if(target==nums[i]+nums[j]){
                    res.push_back({nums[k],nums[i],nums[j]});
                    while(i<j && nums[i]==nums[i+1]) ++i;    //跳过重复的，下同
                    while(i<j && nums[j]==nums[j-1]) --j;
                    ++i;
                    --j;
                }else if(target < nums[i]+nums[j]){
                    --j;
                }else 
                    ++i;
            }
        }
        return res;
    } 
};

//利用set可以省去判断重复组合，有额外空间复杂度
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        set<vector<int>> res;
        sort(nums.begin(), nums.end());
        if (nums.empty() || nums.back() < 0 || nums.front() > 0) return {};
        for (int k = 0; k < nums.size(); ++k) {
            if (nums[k] > 0) break;
            int target = 0 - nums[k];
            int i = k + 1, j = nums.size() - 1;
            while (i < j) {
                if (nums[i] + nums[j] == target) {
                    res.insert({nums[k], nums[i], nums[j]});
                    while (i < j && nums[i] == nums[i + 1]) ++i;
                    while (i < j && nums[j] == nums[j - 1]) --j;
                    ++i; --j;
                } else if (nums[i] + nums[j] < target) ++i;
                else --j;
            }
        }
        return vector<vector<int>>(res.begin(), res.end());
    }
};
